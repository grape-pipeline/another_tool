#!/usr/bin/env python
# This is a non-functional "aligner" that
# mimics something like the GEM aligner where
# an index and an input file is specified and
# a .map output file is generated

import argparse
import logging
import sys
import os

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='[%(levelname)s] : %(message)s')

    parser = argparse.ArgumentParser(prog="aligner", description="""
    Alignment simulator.This does nothing else but touching files, but it looks
    also very nice. Reads input from stdin of no file is specified and writes
    to stdout if no output file is specified.
    """)
    parser.add_argument("-i", "--input", help="Input file")
    parser.add_argument("-o", "--output", help="Output file")
    parser.add_argument("--index", help="The genome index", required=True)
    parser.add_argument("--threads", help="Number of threads to use", type=int, default=1)
    parser.add_argument("--fail", help="Trigger a failure", action="store_true", default=False)
    parser.add_argument("--log", help="Set the log level",
                        choices=["DEBUG", "INFO", "WARN", "ERROR"],
                        default="ERROR")

    args = parser.parse_args()
    # set log level
    logging.getLogger().setLevel(
        {
            "ERROR": logging.ERROR,
            "WARN": logging.WARNING,
            "INFO": logging.INFO,
            "DEBUG": logging.DEBUG
        }[args.log]
    )


    if not os.path.exists(args.index):
        logging.error("File not found : %s" % args.index)
        sys.exit(1)

    logging.info("Starting the alignment")

    f = sys.stdout
    if args.output is not None:
        f = open(args.output, "w")

    # do something super useful
    f.write("READ\tACGCGT CGCTAG\tDDDDDD DDDDDD\tchr1:+:6::chr1:-:20,chr2:+:100:6::chr2:-:120:6\n")

    if args.output is not None:
        f.close()
    logging.info("Done :)")

    # do some checks
    if args.fail:
        logging.error("Fail requested")
        sys.exit(1)

